// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: urls.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShortUrl = `-- name: CreateShortUrl :one
INSERT INTO urls (
  user_id,
  original_url
) VALUES (
  $1, $2
) RETURNING id, user_id, original_url, short_url, created_at
`

type CreateShortUrlParams struct {
	UserID      int32  `json:"userId"`
	OriginalUrl string `json:"originalUrl"`
}

func (q *Queries) CreateShortUrl(ctx context.Context, arg CreateShortUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, createShortUrl, arg.UserID, arg.OriginalUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getShortUrl = `-- name: GetShortUrl :one
SELECT id, user_id, original_url, short_url, created_at FROM urls
WHERE short_url = $1 LIMIT 1
`

func (q *Queries) GetShortUrl(ctx context.Context, shortUrl pgtype.Text) (Url, error) {
	row := q.db.QueryRow(ctx, getShortUrl, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getShortUrlByID = `-- name: GetShortUrlByID :one
SELECT id, user_id, original_url, short_url, created_at FROM urls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShortUrlByID(ctx context.Context, id int32) (Url, error) {
	row := q.db.QueryRow(ctx, getShortUrlByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}
